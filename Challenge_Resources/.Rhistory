utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
q()
#2T-test example
#generate 50 randomly sampled data points
sample_table <- population_table %>% sample_n(50)
#Import used car dataset
population_table <- read.csv('used_car_data.csv', check.names = F, stringsAsFactors = F)
# Import dataset into ggplot
plt <- ggplot(population_table, aes(x=log10(Miles_Driven)))
#Visualize distribution using density plot
plt +geom_density()
#Randomly sample 50 data points
sample_table <- population_table %>% sample_n(50)
# Import dataset into ggplot2
plt <- ggplot(sample_table, aes(x=log10(Miles_Driven)))
#Visualize distribution using density plot
plt + geom_density()
#Compare sample versus population means
t.test(log10(sample_table$Miles_Driven), mu = mean(log10(population_table$Miles_Driven)))
library(jsonlite)
library(tidyverse)
#Import used car dataset
population_table <- read.csv('used_car_data.csv', check.names = F, stringsAsFactors = F)
setwd("~/Digamber/BootCamp/R_Analysis")
#Import used car dataset
population_table <- read.csv('used_car_data.csv', check.names = F, stringsAsFactors = F)
#Import used car dataset
population_table <- read.csv('used_car_data.csv', check.names = F, stringsAsFactors = F)
# Import dataset into ggplot
plt <- ggplot(population_table, aes(x=log10(Miles_Driven)))
# Import dataset into ggplot
plt <- ggplot(population_table, aes(x=log10(Miles_Driven)))
library(tidyverse)
#Import used car dataset
population_table <- read.csv('used_car_data.csv', check.names = F, stringsAsFactors = F)
setwd("~/Digamber/BootCamp/R_Analysis/01_Demo")
#Import used car dataset
population_table <- read.csv('used_car_data.csv', check.names = F, stringsAsFactors = F)
# Import dataset into ggplot
plt <- ggplot(population_table, aes(x=log10(Miles_Driven)))
#Visualize distribution using density plot
plt +geom_density()
#Randomly sample 50 data points
sample_table <- population_table %>% sample_n(50)
# Import dataset into ggplot2
plt <- ggplot(sample_table, aes(x=log10(Miles_Driven)))
#Visualize distribution using density plot
plt + geom_density()
#Compare sample versus population means
t.test(log10(sample_table$Miles_Driven), mu = mean(log10(population_table$Miles_Driven)))
#2T-test example
#generate 50 randomly sampled data points
sample_table <- population_table %>% sample_n(50)
#generate another 50 randomly sampled data points
sample_table1 <- population_table %>% sample_n(50)
#run two sample t-test and compare means of the two samples
t.test(log10(sample_table$Miles_Driven), log10(sample_table1$Miles_Driven))
?t.test
library(dplyr)
sardines <- read.csv(file="../Resources/sardines.csv")
sardines <- read.csv(file="sardines.csv")
sardines <- read.csv(file="../sardines.csv")
setwd("~/Digamber/BootCamp/R_Analysis/15-2-Student_Resources/15-2-Student_Resources/03-Stu_Sardines/Unsolved")
sardines <- read.csv(file="../sardines.csv")
sardines <- read.csv(file="sardines.csv")
?subset
View(sardines)
# Calculate the population mean for Sardine Vertebrae in Alaska.
# Hint: use the subset() function to get only the data for Alaska.
alaskan_population <- subset(sardines$location)
# Calculate the population mean for Sardine Vertebrae in Alaska.
# Hint: use the subset() function to get only the data for Alaska.
alaskan_population <- subset(sardines$location == 1)
# Calculate the population mean for Sardine Vertebrae in Alaska.
# Hint: use the subset() function to get only the data for Alaska.
alaskan_population <- subset(sardines)
# Calculate the population mean for Sardine Vertebrae in Alaska.
# Hint: use the subset() function to get only the data for Alaska.
alaskan_population <- subset(sardines, location ==1)
View(alaskan_population)
mean(alaskan_population)
# Calculate the population mean for Sardine Vertebrae in San Diego.
# Hint: use the subset() function to get only the data for San Diego.
san_diego_polutation <- subset(sardines, location ==2)
mean(alaskan_population)
View(alaskan_population)
mean(alaskan_population$vertebrae)
mean(san_diego_polutation$vertebrae)
# Calculate Independent (Two Sample) T-Test
t.test(alaskan_population, san_diego_polutation)
# Calculate Independent (Two Sample) T-Test
t.test(alaskan_population$vertebrae, san_diego_population)
# Calculate the population mean for Sardine Vertebrae in San Diego.
# Hint: use the subset() function to get only the data for San Diego.
san_diego_population <- subset(sardines, location ==2)
mean(san_diego_population$vertebrae)
# Calculate Independent (Two Sample) T-Test
t.test(alaskan_population$vertebrae, san_diego_population$vertebrae)
# Deliverable 1
# load package
library(dplyr)
# import and read csv as a dataframe
MechaCar_mpg <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
# import and read csv as a dataframe
MechaCar_mpg <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
# Deliverable 1
# load package
library(dplyr)
# import and read csv as a dataframe
MechaCar_mpg <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
# import and read csv as a dataframe
MechaCar_mpg <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
# import and read csv as a dataframe
MechaCar_mpg <- read.csv(file='C:\Users\17013\Documents\Digamber\BootCamp\R_Analysis\Challenge_Resources\MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
# import and read csv as a dataframe
MechaCar_mpg <- read.csv(file='\Challenge_Resources\MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
# import and read csv as a dataframe
MechaCar_mpg <- read.csv(file='\MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
# import and read csv as a dataframe
MechaCar_mpg <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
# Deliverable 1
# load package
library(dplyr)
# import and read csv as a dataframe
MechaCar_mpg <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
library(tidyverse)
# import and read csv as a dataframe
MechaCar_mpg <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
# import and read csv as a dataframe
MechaCar_mpg <- read.csv(file='./MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
# import and read csv as a dataframe
MechaCar_mpg <- read.csv('MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
setwd("~/Digamber/BootCamp/R_Analysis/Challenge_Resources")
# import and read csv as a dataframe
MechaCar_mpg <- read.csv('MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
head(MechaCar_mpg)
# linear regression model
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD ,data=MechaCar_mpg)
# summary statistics
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD ,data=MechaCar_mpg))
# Deliverable 2
# import csv and read as a table
Suspension_Coil <- read.csv(file='Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
#stat summary with summarize()
total_summary <- Suspension_Coil %>% summarize(Mean = mean(PSI), Median = median(PSI), Variance = var(PSI), SD = sd(PSI), .groups = 'keep')
# stat summary wtih group_by()
lot_summary <- Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean = mean(PSI),Median = median(PSI), Variance = var(PSI), SD = sd(PSI) , .groups = 'keep')
View(total_summary)
View(lot_summary)
View(Suspension_Coil)
View(MechaCar_mpg)
View(lot_summary)
View(total_summary)
View(lot_summary)
View(Suspension_Coil)
View(lot_summary)
View(total_summary)
View(lot_summary)
# Deliverable 3
# t-test for all the lots, pop mu = 1500 psi
t.test(Suspension_Coil$PSI,mu=mean(Suspension_Coil$PSI))
# t-test for lot 1
t.test(subset(Suspension_Coil$PSI,Suspension_Coil$Manufacturing_Lot == "Lot1"),mu=mean(Suspension_Coil$PSI))
# t-test for lot 3
t.test(subset(Suspension_Coil$PSI,Suspension_Coil$Manufacturing_Lot == "Lot3"),mu=mean(Suspension_Coil$PSI))
# t-test for lot 2
t.test(subset(Suspension_Coil$PSI,Suspension_Coil$Manufacturing_Lot == "Lot2"),mu=mean(Suspension_Coil$PSI))
